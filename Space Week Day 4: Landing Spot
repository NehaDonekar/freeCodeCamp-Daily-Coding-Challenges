Space Week Day 4: Landing Spot
In day four of Space Week, you are given a matrix of numbers (an array of arrays), representing potential landing spots for your rover. Find the safest landing spot based on the following rules:

Each spot in the matrix will contain a number from 0-9, inclusive.
Any 0 represents a potential landing spot.
Any number other than 0 is too dangerous to land. The higher the number, the more dangerous.
The safest spot is defined as the 0 cell whose surrounding cells (up to 4 neighbors, ignore diagonals) have the lowest total danger.
Ignore out-of-bounds neighbors (corners and edges just have fewer neighbors).
Return the indices of the safest landing spot. There will always only be one safest spot.
For instance, given:

[
  [1, 0],
  [2, 0]
]
Return [0, 1], the indices for the 0 in the first array.

Tests
Waiting:1. find_landing_spot([[1, 0], [2, 0]]) should return [0, 1].
Waiting:2. find_landing_spot([[9, 0, 3], [7, 0, 4], [8, 0, 5]]) should return [1, 1].
Waiting:3. find_landing_spot([[1, 2, 1], [0, 0, 2], [3, 0, 0]]) should return [2, 2].
Waiting:4. find_landing_spot([[9, 6, 0, 8], [7, 1, 1, 0], [3, 0, 3, 9], [8, 6, 0, 9]]) should return [2, 1].

def find_landing_spot(matrix):
    rows = len(matrix)
    cols = len(matrix[0])
    best_spot = None
    lowest_danger = float('inf')

    # Define possible neighbor directions: up, down, left, right
    directions = [(-1,0), (1,0), (0,-1), (0,1)]

    # Loop through each cell
    for i in range(rows):
        for j in range(cols):
            if matrix[i][j] == 0:  # potential landing spot
                danger_sum = 0

                # Check all 4 neighbors
                for dr, dc in directions:
                    r, c = i + dr, j + dc
                    # Ignore out-of-bounds
                    if 0 <= r < rows and 0 <= c < cols:
                        danger_sum += matrix[r][c]

                # Compare total danger to current minimum
                if danger_sum < lowest_danger:
                    lowest_danger = danger_sum
                    best_spot = [i, j]

    return best_spot
